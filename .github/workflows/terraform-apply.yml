name: "Terraform"

on:
  workflow_call:
    inputs:
      aws_account_id:
        required: true
        type: string

env:
  AWS_REGION: "us-east-1"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  plan:
    name: "Plan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::889550907551:role/terraform
          role-session-name: ${{ github.triggering_actor }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=plan.tfplan -input=false
        continue-on-error: true

      - name: Create the plan summary
        uses: actions/github-script@v6
        if: always()
        id: summary
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Prep the output
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 2. Set the output variable
            const fs = require('fs');
            fs.writeFileSync('./summary.md', output);
            core.setOutput('summary', output);

      - name: Write the step summary
        if: always()
        run: cat ./summary.md >> $GITHUB_STEP_SUMMARY

      - name: ls
        run: ls -alh

      - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

      # - name: Save Plan
      #   run: |
      #     aws s3 cp plan.tfplan s3://gamechanger.terraform-state/${{ github.sha }}.tfplan
      #     terraform show plan.tfplan

  apply:
    name: "Apply"
    needs: plan
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::889550907551:role/terraform
          role-session-name: ${{ github.triggering_actor }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # - name: Terraform Init
      #   id: init
      #   run: terraform init

      # - name: Fetch Plan
      #   run: |
      #     aws s3 cp s3://gamechanger.terraform-state/${{ github.sha }}.tfplan plan.tfplan
      #     terraform show plan.tfplan

      - name: ls
        run: ls -alh

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false "plan.tfplan"
