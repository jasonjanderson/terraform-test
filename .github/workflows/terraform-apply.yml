name: "Terraform"

on:
  workflow_call:
    inputs:
      aws_account_id:
        required: true
        type: string
      terraform_version:
        required: false
        type: string
        default: "1.3.2"

env:
  AWS_REGION: "us-east-1"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  plan:
    name: "Plan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: configure aws credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/terraform
      #     role-session-name: ${{ github.triggering_actor }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: ${{ inputs.terraform_version }}

      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check

      # - name: Terraform Init
      #   id: init
      #   run: terraform init

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color

      - name: Terraform Setup
        uses: ./.github/actions/initialize-terraform
        with:
          aws_account_id: ${{ inputs.aws_account_id }}
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=plan.tfplan -input=false -no-color
        continue-on-error: true

      - name: Create the plan summary
        uses: actions/github-script@v6
        if: always()
        id: summary
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            \`\`\`terraform\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            // 2. Set the output variable
            const fs = require('fs');
            fs.writeFileSync('./summary.md', output);
            core.setOutput('summary', output);

      - name: Write the step summary
        if: always()
        run: cat ./summary.md >> $GITHUB_STEP_SUMMARY

      - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

  apply:
    name: "Apply"
    needs: plan
    runs-on: ubuntu-latest
    environment: production
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v3

      # - uses: actions/cache@v2
      #   id: restore-build
      #   with:
      #     path: ./*
      #     key: ${{ github.sha }}

      # - name: configure aws credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/terraform
      #     role-session-name: ${{ github.triggering_actor }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: ${{ inputs.terraform_version }}
      - name: Terraform Setup
        uses: ./.github/actions/initialize-terraform
        with:
          aws_account_id: ${{ inputs.aws_account_id }}
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false "plan.tfplan"
